#! /usr/bin/perl
use strict;
use warnings;
use IO::Select;
use IO::Handle;
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Temp "tempdir";
use File::Path "make_path";

my $help = 0;
my $nowrapper = 0;
Getopt::Long::Configure ("bundling");
GetOptions(
  'help|h'  => \$help,
  'debug|d' => sub { $ENV{TEST_ARGS} = '-vvv';
                     $ENV{KERNEL_ARGS} = '-serial_esc';
                     $nowrapper = 1;
                   },
  'verbose|v'       => sub { $ENV{TEST_ARGS} .= ' -v'; },
  'record|r'        => sub { $ENV{TEST_ARGS} .= ' -r'; },
  'only|o=s'        => sub { $ENV{TEST_ARGS} .= " --gtest_filter=*$_[1]"; },
  'shuffle:i'       => \&gtest_shuffle_seed,
  'no-wrapper|W'    => \$nowrapper,
  'fiasco-args|f=s' => sub { $ENV{KERNEL_ARGS} = $_[1]; },
  'moe-args|m=s'    => sub { $ENV{MOE_ARGS} = $_[1]; },
  'test-args|t=s'   => sub { $ENV{TEST_ARGS} = $_[1]; },
  'logfile|l=s'     => sub { $ENV{TEST_LOGFILE} = $_[1]; },
  'workdir=s'       => sub { $ENV{TEST_WORKDIR} = $_[1]; },
  'image|i=s'       => sub { $ENV{IMAGE_TYPE} = $_[1]; }
) or pod2usage(-verbose => 99, -sections => "OPTIONS");

pod2usage(-verbose => 99,
          -sections => "SYNOPSIS|OPTIONS|DESCRIPTION|HARDWARE CONFIGURATION"
         ) if $help;

if ($nowrapper)
  {
    print("WARNING: output capturing disabled, the test will not terminate automatically.\n");
    exec(@ARGV);
  }

my $timeout = $ENV{TEST_TIMEOUT} || 10;
my $target = $ENV{TEST_TARGET};
my $TAPPER_FD;
my $pid = -1;
my $expline;
my $output_to_tapper_fd = 0;
my $test_description = join(" ", map { $_ ? basename($_) : () } @ARGV, $target);

my $LOG_FD;
my $logfile;
my $workdir = $ENV{TEST_WORKDIR};
if ($workdir)
  {
    my ($name, $path, $suffix) = fileparse($ENV{TEST_TESTFILE} || $target || "", ".t");
    my $testworkdir   = "$workdir/$path$name";
    my $logdir        = "$testworkdir/log"; # tapper-wrapper logs
    my $rundir        = "$testworkdir/run"; # run_test modules.list, ned files, etc.
    $logfile          = "$logdir/testout.log";
    $ENV{TEST_TMPDIR} = $rundir;
    make_path($logdir, $rundir);
  }
else
  {
    $logfile = $ENV{TEST_LOGFILE};
  }
if ($logfile)
  {
    open $LOG_FD, ">>", $logfile or die "Can not open logfile '$logfile'\n";
  }

sub gtest_shuffle_seed
{
  $ENV{TEST_GTEST_SHUFFLE} = 1;
  $ENV{TEST_GTEST_SHUFFLE_SEED} = $_[1];
}

sub get_ps_tree
{
  my ($pid) = @_;

  return () unless $pid && $pid > 1;

  my @pids = ($pid);
  eval
    {
      require Proc::Killfam;
      require Proc::ProcessTable;
      @pids = Proc::Killfam::get_pids([grep { $_->state ne 'defunct' } @{Proc::ProcessTable->new->table}], $pid);
    };
  if ($@) # no Proc::Killfam available; use external 'pstree';
    {
      # 'echo' turns deeper pstree output into one line;
      # pids are in (parens), so 'split' on '()' and take every 2nd entry
      my @pstree = map { split(/[()]/) } qx{echo \$(pstree -lp $pid)};
      @pids = @pstree[grep $_ % 2, 0..$#pstree];
      @pids = grep { system("ps -ax -o pid=,stat= | grep -q '^$_ Z\$'") != 0 } @pids; # ignore zombies
    }
  return @pids;
}

# Kill a process tree beginning from the leaf nodes;
sub kill_ps_tree
{
  my ($pid) = @_;

  return unless $pid > 1;

  while (my @pids = get_ps_tree($pid))
    {
      my $innerpid = $pids[-1];
      if ($innerpid)
        {
          kill 'SIGTERM', $innerpid;
          waitpid $innerpid, 0;
        }
    }
  kill 'SIGTERM', $pid;
  waitpid $pid, 0;
}

sub exit_test
{
  my ($exit_code) = @_;

  # graceful exit override
  $exit_code = 0
    if (not defined $exit_code     # default
        or $exit_code == 69        # SKIP tests
        or $ENV{HARNESS_ACTIVE});  # run under 'prove'

  # tell test runner to finish up
  # signals aren't passed to whole children tree - kill explicit
  kill_ps_tree($pid);
  $pid = -1; # clean behaviour on multiple calling

  close($TAPPER_FD);
  exit($exit_code);
}

sub extract_expected
{
  my $exp = shift;
  chomp $exp;

  if ($exp =~ /^([^|]+)\s+\|\s+(.*)\s*$/)
    {
      return '^'.$1.'\\W+\\| '.$2;
    }
  else
    {
      return '^\\s*'.$exp.'\\s*$';
    }
}

sub fail_test
{
  my $long_msg = shift;
  chomp $long_msg;
  my $exit_code = shift;
  $exit_code = 1 if not defined $exit_code;

  print $TAPPER_FD <<EOT;
1..1
not ok 1 - execution - $test_description
  ---
  message: $long_msg
  severity: fail
  ...
EOT

  exit_test($exit_code)
}


if ($ENV{TAPPER_OUTPUT})
  {
    open($TAPPER_FD, $ENV{TAPPER_OUTPUT}) or die "Cannot open tapper output\n";
  }
else
  {
    open($TAPPER_FD, '>&', STDOUT);
    if ($ENV{HARNESS_ACTIVE})
      {
        # Supress normal output when running within a prove harness.
        open(STDOUT, '>', '/dev/null');
        open(STDERR, '>>', $logfile || '/dev/null');
      }
    else
      {
        open(STDOUT, '>&', STDERR);
      }
  }


print $TAPPER_FD "TAP Version 13\n";

# Number of times the test should be repeated.
my $number_of_runs = 1;
$number_of_runs = $ENV{TEST_EXPECTED_REPEAT} if $ENV{TEST_EXPECTED_REPEAT} or length($ENV{TEST_EXPECTED_REPEAT});

if ($number_of_runs == 0 and $ENV{HARNESS_ACTIVE})
  {
    print $TAPPER_FD "1..0 # SKIP ";
    print $TAPPER_FD "infinite test cannot be run when harness is active\n";
    exit_test(69);
  }

$pid = open(my $test_proc, "-|", @ARGV) or die "Failed to execute $ARGV[0].\n";

my $readbuffer = '';

sub readline_timeout
{
  my $handle = shift;
  my $timeout = shift;

  my $idx = index($readbuffer, "\n");
  if ($idx < 0)
    {
      my $sel = IO::Select->new();
      $sel->add($handle);

      my $was_blocking = $handle->blocking(0);
      while ($idx < 0 and $sel->can_read($timeout))
        {
          # If the following sysread fails, we must be at the end of the file.
          # Just return the content of the readbuffer in that case.
          $idx = length($readbuffer);
          while (sysread($handle, my $part, 128))
            {
              print $part if !$output_to_tapper_fd;
              print $LOG_FD $part if $LOG_FD;
              $readbuffer .= $part;
              $idx = index($readbuffer, "\n");
              last if $idx >= 0;
            }
          STDOUT->flush() if $idx < 0;
        }

      $handle->blocking($was_blocking);

      fail_test("Test timed out after $timeout seconds. Was expecting: $expline")
        if $idx < 0;
    }

  my $outline = '';

  if ($idx >= 0 and $readbuffer)
    {
      $outline = substr($readbuffer, 0, $idx + 1, '');
    }

  $outline =~ s/\r+\n/\n/g;
  return $outline;
}


my $test_proc_exit_code;
if ($ENV{TEST_EXPECTED})
  {
    # search for expected output file in searchpath
    my $expout_file = $ENV{TEST_EXPECTED};
    if (! -e $expout_file or -d $expout_file)
      {
        foreach my $p (split(/:/, $ENV{SEARCHPATH}))
          {
            if (-e "$p/$expout_file" and ! -d "$p/$expout_file")
              {
                $expout_file = "$p/$expout_file";
                last;
              }
          }
      }

    # read expected output from a file and check against true output
    open(my $expect_fd, '<', $expout_file)
      or fail_test("Can't open expected output ('$expout_file')");

    $expline = 'Welcome to L4/Fiasco.OC!';

    my $expoutput = extract_expected($expline);
    my $num_res = 1;
    my $wait_until = time + 2 * $timeout;
    my $test_eof = 1;
    my $test_lastline;

    while ($_ = readline_timeout($test_proc, $timeout))
      {
        $test_lastline = $_;
        # strip color escapes
        s/\e\[[\d,;\s]+[A-Za-z]//gi;
        if (/$expoutput/)
          {
            if (!($expline = <$expect_fd>))
              {
                if ($number_of_runs == 1)
                  {
                    $test_eof = 0;
                    last;
                  }
                else
                  {
                    $number_of_runs-- if ($number_of_runs > 0);
                    # rewind the expected file
                    close($expect_fd);
                    open($expect_fd, '<', $expout_file)
                      or fail_test("Can't open expected output ('$expout_file')");

                    $expline = <$expect_fd>;
                  }
              }
            $expoutput = extract_expected($expline);
            $num_res++;
            $wait_until = time + 2 * $timeout;
          }
        else
          {
            if (time > $wait_until)
              {
                $test_eof = 0;
                last;
              }
          }
      }

    close $expect_fd;

    my $res = '';
    my $res_msg;
    if ($test_eof and !close($test_proc))
      {
        $test_proc_exit_code = $? >> 8;
        if ($test_proc_exit_code == 69)
          {
            print $TAPPER_FD "1..0 # SKIP $test_lastline\n";
          }
        else
          {
            $res = 'not ';
            $res_msg = "Failed to execute test. ($test_proc_exit_code)";
          }
      }
    elsif ($expline)
      {
        $res = "not ";
        $num_res++;
        $res_msg = "Expected output not found in line $num_res : $expline";
      }
    else
      {
        $res_msg = "${num_res} lines of output matched.";
      }

    if ($res_msg)
      {
        chomp $res_msg;
        print $TAPPER_FD <<EOEXT;
1..1
${res}ok 1 - execution - $test_description
  ---
  message: $res_msg
  ...
EOEXT
      }
  }
else
  {
    # look for TAP output
    my $tapper_prog_prefix = '';
    $expline = "begin of TAP test output (TAP TEST START)";
    my $test_eof = 0;
    my $test_lastline;

    while ($_ = readline_timeout($test_proc, $timeout))
      {
        if (/TAP TEST FINISH/)
          {
            $test_eof = 1;
            last;
          }
        $test_lastline = $_;
        if ($output_to_tapper_fd)
          {
            # Only output from the test program should be sent to TAPPER_FD.
            # Other programs may continue to print undisturbed.
            if (s/^\Q$tapper_prog_prefix\E//)
              {
                # strip color escapes
                s/\e\[[\d,;\s]+[A-Za-z]//gi;
                print $TAPPER_FD $_;
              }
            else
              {
                print $_;
              }
          }
        else
          {
            if (/^(.*)TAP TEST START/)
              {
                $output_to_tapper_fd = 1;
                $tapper_prog_prefix = $1;
                $expline = "end of TAP test output (TAP TEST FINISH)";
              }
          }
      }
    if (!$test_eof)
      {
        waitpid $pid, 0;
        $pid = -1;
        $test_proc_exit_code = $? >> 8;
        if ($test_proc_exit_code == 69)
          {
            print $TAPPER_FD "1..0 # SKIP $test_lastline\n";
            exit_test($test_proc_exit_code);
          }
        else
          {
            fail_test("Test program finished prematurely", $test_proc_exit_code)
          }
      }
  }

exit_test($test_proc_exit_code);

__END__

=head1 NAME

tapper-wrapper - Wrapper for TAP test runner.

=head1 SYNOPSIS

tapper-wrapper [options] [test-runner]

$TEST_SCRIPT [options]

=head1 OPTIONS

  --help,-h        Print this help message.
  --nowrapper,-W   Disable output capturing and timeout check.
                   Necessary when using Fiasco JDB for debugging.

  --debug,-d       Run in debug mode. Shortcut for:
                     -W -vvv -f "-serial_esc"

  --fiasco-args,-f Additional arguments to pass to fiasco.
    <STRING>
  --moe-args,-m    Additional arguments to pass to Moe.
    <STRING>
  --test-args,-t   Arguments to pass to the test application.
    <STRING>

  --image,-i       Create an image of the given type instead of executing
    <STRING>       the test on the target platform.
                   For available image types see 'make help'.

  --logfile,-l     Append output of test execution to the given file
    <STRING>       unless --workdir is given.

  --workdir        Create logs, temp and other files below the given
    <STRING>       directory. That directory is taken as base dir for
                   more automatically created subdir levels using the
                   current test path, in order to guarantee
                   conflict-free usage when running many different
                   tests with a common workdir. When --workdir is
                   provided then --logfile is ignored as it is
                   organized below workdir.

 Options for gtest test applications:
  --verbose,-v     Run test in verbose mode. Repeat for increased verbosity.
  --only,-o <TEST> Only run given test.
                   Produces command line: --gtest_filter=*<TEST>

  --shuffle        Run tests in random order. <SEED> is optional, if <SEED> is
    <SEED>         not provided this script generates one.
                   Produces gtest command line additions:
                     --gtest_shuffle --gtest_random_seed=<SEED>
                   For tests that run in 'expected output' mode those arguments
                   are not added.
                   Specifing gtest_shuffle in --test-args is undefined behavior.

  --record,-r      Record per test meta information such as path of the test
                   file, the line number of the test, and the name of the test.

  For more options to gtest try running with: --test-args -h

=head1 DESCRIPTION

Filters output from a test runner and formats it to proper TAP.

The wrapper can run in two different modes:

1. If a file with expected output is given, then it will read this file,
   capture the output from the test runner and check for the given output.
   Each line in the expected output file is considered a regular expression
   that must match the beginning of a line.

2. If no expected output is given, the test runner is assumed to produce
   TAP output. The output must appear on stdout. It must start with
   'TAP TEST START' on a single line. Any output before this tag is ignored.
   Once the TAP output is finished, 'TAP TEST FINISH' must be printed
   after which the test runner will be killed immediately.

=head1 HARDWARE CONFIGURATION

If tests need hints about the actually available hardware you can set
an environment variable TEST_HWCONFIG to point to a hardware
configuration file which contains a collection of key=value pairs like
this:

  VIRTUALIZATION = 'y'
  AHCI = 'n'
  NUM_CPUS = 8

Those entries are provided in the 'test_env.lua' script under the key
t.HWCONFIG to be used like this:

 local t = require("rom/test_env");
 if (t.HWCONFIG.VIRTUALIZATION == 'y') then ... end


=cut
